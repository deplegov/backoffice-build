{"version":3,"file":"static/js/434.2dc0f960.chunk.js","mappings":"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","sources":["const/api.js","views/pages/Loading.js","views/pages/debt/listDebtCustomer.js"],"sourcesContent":["export default function api(link) {\r\n  return `${process.env.REACT_APP_BACKEND_HOST}/${link}`;\r\n}\r\n","import React from \"react\";\r\nimport { CSpinner } from \"@coreui/react\";\r\nclass Loading extends React.Component {\r\n  render() {\r\n    return <CSpinner />;\r\n  }\r\n}\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CButton,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n  CPaginationItem,\r\n  CPagination,\r\n} from \"@coreui/react\";\r\nimport api from \"../../../const/api\";\r\nimport moment from \"moment\";\r\nimport Loading from \"../Loading\";\r\n\r\nexport default class ListDebtCustomer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { match } = props;\r\n    this.state = {\r\n      id_customer: match && match.params && match.params.id,\r\n      loading: true,\r\n      debt: null,\r\n      error: \"\",\r\n      role: \"\",\r\n      load: false,\r\n      history: false,\r\n      pagination: [],\r\n      totalPage: 0,\r\n      pageList: 1,\r\n      pageNumber: 10,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (sessionStorage.getItem(\"user\")) {\r\n      const user = JSON.parse(sessionStorage.getItem(\"user\"));\r\n      this.setRole(user.role_id.entitled);\r\n    }\r\n    this.getDebtPayment();\r\n    this.getDebtData(1);\r\n  }\r\n\r\n  pagination = (totalPages) => {\r\n    let page = [];\r\n    for (let i = 1; i <= totalPages; i++) {\r\n      page.push(i);\r\n    }\r\n    this.setState({ pagination: page });\r\n  };\r\n\r\n  getDebtData = (page, pageNumber) => {\r\n    this.setLoading(true);\r\n    const id_customer = this.state.id_customer;\r\n    fetch(api(`debt/customer/${id_customer}/page/${page}`), {\r\n      method: \"GET\",\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json().then((data) => {\r\n          this.setState({\r\n            debt: data.debt,\r\n            pageList: page,\r\n            pageNumber: pageNumber,\r\n            totalPage: data.pagination.totalPages,\r\n          });\r\n          this.pagination(data.pagination.totalPages);\r\n          this.setLoading(false);\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  getDebtPayment() {\r\n    this.setLoading(true);\r\n    const id_customer = this.state.id_customer;\r\n    fetch(api(`debtPayment/history/${id_customer}`), { method: \"GET\" }).then(\r\n      (res) => {\r\n        if (res.ok) {\r\n          res.json().then((data) => {\r\n            if (data && data.total) {\r\n              if (data.total.total != null) {\r\n                this.setState({\r\n                  history: false,\r\n                  loading: false,\r\n                });\r\n              } else {\r\n                this.setState({\r\n                  history: true,\r\n                  loading: false,\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  DebtDetail(id) {\r\n    this.props.history.push(\"/debt/details/\" + id);\r\n  }\r\n\r\n  debtPayementDetailGlobal(id) {\r\n    const { id_customer } = this.state;\r\n    this.props.history.push(\"/debt/payment/\" + id_customer);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      debt,\r\n      role,\r\n      loading,\r\n      pageNumber,\r\n      pagination,\r\n      totalPage,\r\n      pageList,\r\n      history,\r\n    } = this.state;\r\n    if (loading) {\r\n      return <Loading />;\r\n    }\r\n    return (\r\n      <>\r\n        <CRow>\r\n          <CCol xs={12}>\r\n            <CCard className=\"mb-4\">\r\n              <CCardHeader\r\n                style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n              >\r\n                <strong>Liste des Dettes</strong>\r\n                <CButton\r\n                  color={\"light\"}\r\n                  onClick={() => this.debtPayementDetailGlobal()}\r\n                  disabled={history}\r\n                >\r\n                  Historique des paiements\r\n                </CButton>\r\n              </CCardHeader>\r\n              <CCardBody>\r\n                <CTable>\r\n                  <CTableHead>\r\n                    <CTableRow>\r\n                      <CTableHeaderCell scope=\"col\">\r\n                        Dernière modification\r\n                      </CTableHeaderCell>\r\n                      <CTableHeaderCell scope=\"col\">Libelle</CTableHeaderCell>\r\n                      <CTableHeaderCell scope=\"col\">\r\n                        Montant total (dette)\r\n                      </CTableHeaderCell>\r\n                      {/* <CTableHeaderCell scope=\"col\">\r\n                        Montant total (dû)\r\n                      </CTableHeaderCell>\r\n                      <CTableHeaderCell scope=\"col\">\r\n                        Reste à payer\r\n                      </CTableHeaderCell> */}\r\n                      {/* <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell> */}\r\n                    </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                    {debt &&\r\n                      debt.map((Debt, index) => (\r\n                        <CTableRow key={index}>\r\n                          <CTableDataCell>\r\n                            {moment(Debt.modif_date).format(\r\n                              \"YYYY-MM-DD HH:mm:ss\"\r\n                            )}\r\n                          </CTableDataCell>\r\n                          <CTableDataCell>{Debt.libelle}</CTableDataCell>\r\n                          <CTableDataCell>\r\n                            {Number(Debt.total_amount) > 1000 ? (\r\n                              <>\r\n                                {Number(Debt.total_amount).toLocaleString()} Ar\r\n                              </>\r\n                            ) : (\r\n                              <>{Debt.total_amount} Ar</>\r\n                            )}\r\n                          </CTableDataCell>\r\n                          {/* <CTableDataCell>\r\n                            {Number(Debt.total_amount_payed) > 1000 ? (\r\n                              <>\r\n                                {Number(\r\n                                  Debt.total_amount_payed\r\n                                ).toLocaleString()}{\" \"}\r\n                                Ar\r\n                              </>\r\n                            ) : (\r\n                              <>{Debt.total_amount_payed} Ar</>\r\n                            )}\r\n                          </CTableDataCell>\r\n                          <CTableDataCell>\r\n                            {Number(Debt.to_payed) > 1000 ? (\r\n                              <>{Number(Debt.to_payed).toLocaleString()} Ar</>\r\n                            ) : (\r\n                              <>{Debt.to_payed} Ar</>\r\n                            )}\r\n                          </CTableDataCell> */}\r\n\r\n                          {/* {Debt.status === 0 ? (\r\n                            <CTableDataCell style={{ color: \"red\" }}>\r\n                              Non payé\r\n                            </CTableDataCell>\r\n                          ) : Debt.status === 1 ? (\r\n                            <CTableDataCell style={{ color: \"green\" }}>\r\n                              Payé\r\n                            </CTableDataCell>\r\n                          ) : (\r\n                            <></>\r\n                          )} */}\r\n                          {role === \"Administrateur\" ? (\r\n                            <CTableDataCell>\r\n                              <CButton\r\n                                color={\"light\"}\r\n                                onClick={() => this.DebtDetail(Debt.debt_id)}\r\n                              >\r\n                                Voir\r\n                              </CButton>\r\n                            </CTableDataCell>\r\n                          ) : (\r\n                            <></>\r\n                          )}\r\n                        </CTableRow>\r\n                      ))}\r\n                  </CTableBody>\r\n                </CTable>\r\n                <CPagination aria-label=\"Page navigation example\">\r\n                  <CPaginationItem\r\n                    aria-label=\"Previous\"\r\n                    disabled={pageList === 1}\r\n                    onClick={() => this.getDebtData(pageList - 1, pageNumber)}\r\n                  >\r\n                    <span aria-hidden=\"true\">&laquo;</span>\r\n                  </CPaginationItem>\r\n                  {pagination.map((page, index) => (\r\n                    <CPaginationItem\r\n                      key={index}\r\n                      active={page === pageList}\r\n                      onClick={() => this.getDebtData(page, pageNumber)}\r\n                    >\r\n                      {` ${page} `}\r\n                    </CPaginationItem>\r\n                  ))}\r\n                  <CPaginationItem\r\n                    aria-label=\"Next\"\r\n                    disabled={\r\n                      totalPage - pageList === 0 || (debt && debt.length === 0)\r\n                    }\r\n                    onClick={() => this.getDebtData(pageList + 1, pageNumber)}\r\n                  >\r\n                    <span aria-hidden=\"true\"> &raquo; </span>\r\n                  </CPaginationItem>\r\n                </CPagination>\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        </CRow>\r\n      </>\r\n    );\r\n  }\r\n  setLoad(l) {\r\n    this.setState({\r\n      load: l,\r\n    });\r\n  }\r\n\r\n  setError(m) {\r\n    this.setState({\r\n      error: m,\r\n    });\r\n  }\r\n\r\n  setLoading(state) {\r\n    this.setState({\r\n      loading: state,\r\n    });\r\n  }\r\n  setRole(r) {\r\n    this.setState({\r\n      role: r,\r\n    });\r\n  }\r\n}\r\n"],"names":["api","link","process","Loading","React","ListDebtCustomer","props","pagination","totalPages","page","i","push","setState","getDebtData","pageNumber","setLoading","id_customer","state","fetch","method","then","res","ok","json","data","debt","pageList","totalPage","match","params","id","loading","error","role","load","history","sessionStorage","getItem","user","JSON","parse","this","setRole","role_id","entitled","getDebtPayment","total","xs","className","style","display","justifyContent","color","onClick","debtPayementDetailGlobal","disabled","scope","map","Debt","index","moment","modif_date","format","libelle","Number","total_amount","toLocaleString","DebtDetail","debt_id","active","length","l","m","r"],"sourceRoot":""}