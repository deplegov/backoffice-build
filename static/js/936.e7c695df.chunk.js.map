{"version":3,"file":"static/js/936.e7c695df.chunk.js","mappings":"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","sources":["const/api.js","views/pages/Loading.js","views/pages/entry/InsertEntry.js","../node_modules/@coreui/icons/js/free/cil-pencil.js"],"sourcesContent":["export default function api(link) {\r\n  return `${process.env.REACT_APP_BACKEND_HOST}/${link}`;\r\n}\r\n","import React from \"react\";\r\nimport { CSpinner } from \"@coreui/react\";\r\nclass Loading extends React.Component {\r\n  render() {\r\n    return <CSpinner />;\r\n  }\r\n}\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CFormInput,\r\n  CInputGroup,\r\n  CInputGroupText,\r\n  CRow,\r\n  CFormSelect,\r\n  CFormTextarea,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { cilPencil } from \"@coreui/icons\";\r\nimport api from \"../../../const/api\";\r\nimport Loading from \"../Loading\";\r\n\r\nexport default class InsertEntry extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      libelle: \"\",\r\n      quantity: \"\",\r\n      unit_price: \"\",\r\n      total_amount: \"\",\r\n      customer_id: \"\",\r\n      message: \"\",\r\n      note: \"\",\r\n      customers: null,\r\n      ready: false,\r\n      load: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCustomers();\r\n  }\r\n\r\n  addEntry() {\r\n    this.setLoad(true);\r\n    fetch(api(\"entry\"), {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        libelle: this.state.libelle,\r\n        quantity: parseInt(this.state.quantity),\r\n        unit_price: parseInt(this.state.unit_price),\r\n        total_amount:\r\n          parseInt(this.state.quantity) * parseInt(this.state.unit_price),\r\n        customer_id: parseInt(this.state.customer_id),\r\n        notes: this.state.note,\r\n      }),\r\n    }).then((res) => {\r\n      if (res.ok)\r\n        res.json().then((data) => {\r\n          //console.log(data);\r\n          this.setMessage(\"Ajout réussi\");\r\n          this.setLoad(false);\r\n          this.props.history.push(\"/Home\");\r\n        });\r\n      else {\r\n        res.json().then((res) => {\r\n          if (typeof res.message === typeof []) {\r\n            this.setMessage(res.message[0]);\r\n            this.setLoad(false);\r\n          } else {\r\n            this.setMessage(res.message);\r\n            this.setLoad(false);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  getCustomers() {\r\n    this.setReady(false);\r\n    fetch(api(`customer`), { method: \"GET\" }).then((res) => {\r\n      if (res.ok)\r\n        res.json().then((data) => {\r\n          if (data && data.customer)\r\n            this.setState({\r\n              customers: data.customer,\r\n              ready: true,\r\n            });\r\n        });\r\n    });\r\n  }\r\n  render() {\r\n    const { libelle, quantity, unit_price, message, customers, ready, load } =\r\n      this.state;\r\n    return (\r\n      <div className=\"bg-light min-vh-50 d-flex flex-row align-items-center\">\r\n        {!ready ? (\r\n          <>\r\n            <Loading></Loading>\r\n          </>\r\n        ) : (\r\n          <CContainer>\r\n            {\" \"}\r\n            <CRow className=\"justify-content-center\">\r\n              <CCol md={9} lg={7} xl={6}>\r\n                <CCard className=\"mx-4\">\r\n                  <CCardBody className=\"p-4\">\r\n                    <CForm\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                      }}\r\n                    >\r\n                      <h1>Ajout Entrée</h1>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CInputGroupText>\r\n                          <CIcon icon={cilPencil} />\r\n                        </CInputGroupText>\r\n                        <CFormInput\r\n                          type=\"text\"\r\n                          placeholder=\"Libelle\"\r\n                          autoComplete=\"Libelle\"\r\n                          value={libelle}\r\n                          onChange={this.setLibelle}\r\n                        />\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CFormInput\r\n                          type=\"number\"\r\n                          placeholder=\"Quantité\"\r\n                          autoComplete=\"Quantité\"\r\n                          value={quantity}\r\n                          onChange={this.setQuantity}\r\n                        />\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CFormInput\r\n                          type=\"number\"\r\n                          placeholder=\"Prix unitaire\"\r\n                          autoComplete=\"Prix unitaire\"\r\n                          value={unit_price}\r\n                          onChange={this.setUnitPrice}\r\n                        />\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CInputGroupText\r\n                          component=\"label\"\r\n                          htmlFor=\"inputGroupSelect01\"\r\n                        >\r\n                          Client\r\n                        </CInputGroupText>\r\n                        <CFormSelect\r\n                          id=\"inputGroupSelect01\"\r\n                          onChange={this.setCustomerId}\r\n                        >\r\n                          <option value={null}> </option>\r\n                          {customers &&\r\n                            customers.map((c, index) => (\r\n                              <option key={index} value={c.id}>\r\n                                {c.name} {c.surname}\r\n                              </option>\r\n                            ))}\r\n                        </CFormSelect>\r\n                      </CInputGroup>\r\n                      <CFormTextarea\r\n                        onChange={this.setNotes}\r\n                        placeholder=\"notes\"\r\n                      />\r\n                      <div className=\"d-grid\" style={{ marginTop: \"18px\" }}>\r\n                        {load ? (\r\n                          <CButton\r\n                            id=\"aim-color-green\"\r\n                            className=\"px-4\"\r\n                            disabled\r\n                          >\r\n                            <Loading></Loading>\r\n                          </CButton>\r\n                        ) : (\r\n                          <CButton\r\n                            color=\"success\"\r\n                            type=\"submit\"\r\n                            onClick={() => this.addEntry()}\r\n                          >\r\n                            Ajouter\r\n                          </CButton>\r\n                        )}\r\n\r\n                        <label>{message}</label>\r\n                      </div>\r\n                    </CForm>\r\n                  </CCardBody>\r\n                </CCard>\r\n              </CCol>\r\n            </CRow>\r\n          </CContainer>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  setLoad(l) {\r\n    this.setState({\r\n      load: l,\r\n    });\r\n  }\r\n  setLibelle = (e) => {\r\n    this.setState({\r\n      libelle: e.target.value,\r\n    });\r\n  };\r\n  setQuantity = (e) => {\r\n    this.setState({\r\n      quantity: e.target.value,\r\n    });\r\n  };\r\n  setUnitPrice = (e) => {\r\n    this.setState({\r\n      unit_price: e.target.value,\r\n    });\r\n  };\r\n  setTotalAmount = (e) => {\r\n    this.setState({\r\n      total_amount: e.target.value,\r\n    });\r\n  };\r\n\r\n  setNotes = (e) => {\r\n    this.setState({\r\n      note: e.target.value,\r\n    });\r\n  };\r\n\r\n  setMessage = (m) => {\r\n    this.setState({\r\n      message: m,\r\n    });\r\n  };\r\n  setCustomerId = (e) => {\r\n    this.setState({\r\n      customer_id: e.target.value,\r\n    });\r\n  };\r\n  setReady = (load) => {\r\n    this.setState({\r\n      ready: load,\r\n    });\r\n  };\r\n}\r\n","export const cilPencil = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M29.663,482.25l.087.087a24.847,24.847,0,0,0,17.612,7.342,25.178,25.178,0,0,0,8.1-1.345l142.006-48.172,272.5-272.5A88.832,88.832,0,0,0,344.334,42.039l-272.5,272.5L23.666,456.541A24.844,24.844,0,0,0,29.663,482.25Zm337.3-417.584a56.832,56.832,0,0,1,80.371,80.373L411.5,180.873,331.127,100.5ZM99.744,331.884,308.5,123.127,388.873,203.5,180.116,412.256,58.482,453.518Z' class='ci-primary'/>\"]"],"names":["api","link","process","Loading","React","InsertEntry","props","setLibelle","e","setState","libelle","target","value","setQuantity","quantity","setUnitPrice","unit_price","setTotalAmount","total_amount","setNotes","note","setMessage","m","message","setCustomerId","customer_id","setReady","load","ready","state","customers","this","getCustomers","setLoad","fetch","headers","method","body","JSON","stringify","parseInt","notes","then","res","ok","json","data","history","push","customer","className","md","lg","xl","onSubmit","preventDefault","icon","cilPencil","type","placeholder","autoComplete","onChange","component","htmlFor","id","map","c","index","name","surname","style","marginTop","disabled","color","onClick","addEntry","l"],"sourceRoot":""}