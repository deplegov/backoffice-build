{"version":3,"file":"static/js/653.a995f7f8.chunk.js","mappings":"+GAAe,SAASA,EAAIC,GAC1B,MAAM,GAAN,OAAUC,mDAAV,YAAgDD,G,8HCC5CE,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAGH,OAHGA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MACJ,WACE,OAAO,SAAC,KAAD,QACR,EAHGA,CAAgBC,EAAAA,WAKtB,O,gLCWqBC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACnB,WAAYC,GAAQ,IAAD,kBACjB,IAAQC,EAAUD,EAAVC,MADS,OAEjB,cAAMD,IACDE,MAAQ,CACXC,YAAaF,GAASA,EAAMG,QAAUH,EAAMG,OAAOC,GACnDC,SAAS,EACTC,YAAa,KACbC,MAAO,GACPC,iBAAkB,EAClBC,mBAAoB,EACpBC,UAAW,GAVI,EAgNlB,OApMA,yCAED,WACEC,KAAKC,mBACN,4BAED,WAAkB,IAAD,OACfD,KAAKE,YAAW,GAChB,IAAMX,EAAcS,KAAKV,MAAMC,YAC/BY,OAAMrB,EAAAA,EAAAA,GAAI,uBAAD,OAAwBS,IAAgB,CAAEa,OAAQ,QAASC,MAClE,SAACC,GACKA,EAAIC,IACND,EAAIE,OAAOH,MAAK,SAACI,GACXA,GACF,EAAKC,SAAS,CACZf,YAAac,EAAKd,YAClBE,iBAAkBc,SAASF,EAAKG,MAAMA,OACtCd,mBAAoBW,EAAKX,mBACzBC,UAAWU,EAAKV,UAChBL,SAAS,YAOtB,oBAED,WACE,MAMIM,KAAKV,MALPI,EADF,EACEA,QACAC,EAFF,EAEEA,YACAE,EAHF,EAGEA,iBACAC,EAJF,EAIEA,mBACAC,EALF,EAKEA,UAEIc,EAAQ,CACZC,YAAa,gBACbC,YAAa,QACbC,YAAa,OAEf,OAAItB,GACK,SAAC,IAAD,KAGP,+BACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAMuB,GAAI,GAAV,UACE,UAAC,KAAD,CAAOC,UAAU,OAAjB,WACE,SAAC,KAAD,KACA,UAAC,KAAD,YACE,gBAAKA,UAAU,QAAf,UACE,mDAEF,gBAAKA,UAAU,qBAAf,SACGvB,GAAeA,GACd,iBAAKuB,UAAU,uBAAf,WACE,gBAAKA,UAAU,kBAAf,SACGvB,EAAY,GAAGwB,aACd,iCACE,0BACGxB,EAAY,GAAGwB,YAAYC,KAAM,IACjCzB,EAAY,GAAGwB,YAAYE,YAE9B,wBAAK1B,EAAY,GAAGwB,YAAYG,WAChC,wBAAK3B,EAAY,GAAGwB,YAAYI,mBAGlC,iCACE,0CACA,4CACA,gDAIN,iBAAKL,UAAU,mBAAf,WACE,iBAAKA,UAAU,cAAf,WACE,iBAAKA,UAAU,iBAAf,WACE,kCACA,gDAEF,iBAAKA,UAAU,WAAf,WACE,wBACGvB,EAAY,GAAGwB,YAAY1B,GAC1BE,EAAY,GAAGwB,YAAYK,UAE/B,wBACGC,IAAO9B,EAAY,GAAG+B,mBAAmBC,OACxC,gCAKR,iBAAKT,UAAU,gBAAf,WACE,kDACA,wBACGpB,EAAqB,KACpB,gCAAGA,EAAmB8B,iBAAtB,UAEA,gCAAG9B,EAAH,eAIN,iBAAKoB,UAAU,gBAAf,WACE,qCACA,wBACGrB,EAAmB,KAClB,gCAAGA,EAAiB+B,iBAApB,UAEA,gCAAG/B,EAAH,eAIN,iBAAKqB,UAAU,gBAAf,WACE,gDACA,eAAKL,MAAO,CAACgB,MAAM,OAAnB,SACG9B,EAAY,KACX,gCAAGA,EAAU6B,iBAAb,UAEA,gCAAG7B,EAAH,qBAOV,sBAIJ,UAAC,KAAD,YACE,SAAC,IAAD,CAAYc,MAAO,CAAEiB,gBAAiB,OAAQC,OAAQ,KAAtD,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAkBC,MAAM,MAAxB,mBACA,SAAC,KAAD,CAAkBA,MAAM,MAAxB,sBACA,SAAC,KAAD,CAAkBA,MAAM,MAAxB,4BAGA,SAAC,KAAD,CAAkBA,MAAM,MAAxB,+BAGJ,SAAC,KAAD,UACGrC,GACCA,EAAYsC,KAAI,SAACC,EAAQC,GAAT,OACd,UAAC,KAAD,YACE,SAAC,KAAD,CAAgBtB,MAAOA,EAAvB,SACGY,IAAOS,EAAOE,cAAcT,OAC3B,0BAGJ,SAAC,KAAD,CAAgBd,MAAOA,EAAvB,SACsB,KAAnBqB,EAAOG,SACN,8BAAGH,EAAOG,WAEV,8BAAGH,EAAOI,cAAcD,aAG5B,SAAC,KAAD,CAAgBxB,MAAOA,EAAvB,SACGqB,EAAOK,mBAAqB,KAC3B,gCACGL,EAAOK,mBAAmBX,iBAD7B,UAIA,gCAAGM,EAAOK,mBAAV,YAGJ,UAAC,KAAD,CAAgB1B,MAAOA,EAAvB,UACGqB,EAAOM,YAAYpB,KAAM,IACzBc,EAAOM,YAAYnB,aAxBRc,yBAoCrC,wBAED,SAAW7C,GACTU,KAAKU,SAAS,CACZhB,QAASJ,MAEZ,mBACD,SAAMG,GACJO,KAAKU,SAAS,CACZjB,GAAIA,MAEP,sBACD,SAASgD,GACPzC,KAAKU,SAAS,CACZE,MAAO6B,QAEV,EAjNkBtD,CAA2BD,EAAAA","sources":["const/api.js","views/pages/Loading.js","views/pages/debt/debtPaymentDetails.js"],"sourcesContent":["export default function api(link) {\r\n  return `${process.env.REACT_APP_BACKEND_HOST}/${link}`;\r\n}\r\n","import React from \"react\";\r\nimport { CSpinner } from \"@coreui/react\";\r\nclass Loading extends React.Component {\r\n  render() {\r\n    return <CSpinner />;\r\n  }\r\n}\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from \"@coreui/react\";\r\nimport api from \"../../../const/api\";\r\nimport Loading from \"../Loading\";\r\nimport moment from \"moment\";\r\n\r\nexport default class DebtPayementDetail extends React.Component {\r\n  constructor(props) {\r\n    const { match } = props;\r\n    super(props);\r\n    this.state = {\r\n      id_customer: match && match.params && match.params.id,\r\n      loading: true,\r\n      debtPayment: null,\r\n      error: \"\",\r\n      totalAmountPayed: 0,\r\n      totalAmountToPayed: 0,\r\n      remainder: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getDebtPayment();\r\n  }\r\n\r\n  getDebtPayment() {\r\n    this.setLoading(true);\r\n    const id_customer = this.state.id_customer;\r\n    fetch(api(`debtPayment/history/${id_customer}`), { method: \"GET\" }).then(\r\n      (res) => {\r\n        if (res.ok) {\r\n          res.json().then((data) => {\r\n            if (data) {\r\n              this.setState({\r\n                debtPayment: data.debtPayment,\r\n                totalAmountPayed: parseInt(data.total.total),\r\n                totalAmountToPayed: data.totalAmountToPayed,\r\n                remainder: data.remainder,\r\n                loading: false,\r\n              });\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      debtPayment,\r\n      totalAmountPayed,\r\n      totalAmountToPayed,\r\n      remainder,\r\n    } = this.state;\r\n    const style = {\r\n      borderColor: \"darkslategrey\",\r\n      borderStyle: \"solid\",\r\n      borderWidth: \"1px\",\r\n    };\r\n    if (loading) {\r\n      return <Loading />;\r\n    }\r\n    return (\r\n      <>\r\n        <CRow>\r\n          <CCol xs={12}>\r\n            <CCard className=\"mb-4\">\r\n              <CCardHeader></CCardHeader>\r\n              <CCardBody>\r\n                <div className=\"title\">\r\n                  <h1>Historique payement</h1>\r\n                </div>\r\n                <div className=\"detail-debtPayment\">\r\n                  {debtPayment && debtPayment ? (\r\n                    <div className=\"customer-debtPayment\">\r\n                      <div className=\"customer-detail\">\r\n                        {debtPayment[0].customer_id ? (\r\n                          <>\r\n                            <h5>\r\n                              {debtPayment[0].customer_id.name}{\" \"}\r\n                              {debtPayment[0].customer_id.surname}\r\n                            </h5>\r\n                            <h5>{debtPayment[0].customer_id.address}</h5>\r\n                            <h5>{debtPayment[0].customer_id.number_phone}</h5>\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <h5>Aucun client</h5>\r\n                            <h5>Aucune adresse</h5>\r\n                            <h5>Aucun contact</h5>\r\n                          </>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"info-debtPayment\">\r\n                        <div className=\"div-display\">\r\n                          <div className=\"date-ref-title\">\r\n                            <h5>Ref#</h5>\r\n                            <h5>Date et Heure# </h5>\r\n                          </div>\r\n                          <div className=\"date-ref\">\r\n                            <h5>\r\n                              {debtPayment[0].customer_id.id +\r\n                                debtPayment[0].customer_id.gender}\r\n                            </h5>\r\n                            <h5>\r\n                              {moment(debtPayment[0].modification_date).format(\r\n                                \"YYYY-MM-DD HH:mm:ss\"\r\n                              )}\r\n                            </h5>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"info-received\">\r\n                          <h5>Montant total dette:</h5>\r\n                          <h5>\r\n                            {totalAmountToPayed > 1000 ? (\r\n                              <>{totalAmountToPayed.toLocaleString()} Ar</>\r\n                            ) : (\r\n                              <>{totalAmountToPayed} Ar</>\r\n                            )}\r\n                          </h5>\r\n                        </div>\r\n                        <div className=\"info-received\">\r\n                          <h5>Payer :</h5>\r\n                          <h5>\r\n                            {totalAmountPayed > 1000 ? (\r\n                              <>{totalAmountPayed.toLocaleString()} Ar</>\r\n                            ) : (\r\n                              <>{totalAmountPayed} Ar</>\r\n                            )}\r\n                          </h5>\r\n                        </div>\r\n                        <div className=\"info-received\">\r\n                          <h5>Reste à payer :</h5>\r\n                          <h5  style={{color:'red'}}>\r\n                            {remainder > 1000 ? (\r\n                              <>{remainder.toLocaleString()} Ar</>\r\n                            ) : (\r\n                              <>{remainder} Ar</>\r\n                            )}\r\n                          </h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div></div>\r\n                  )}\r\n                </div>\r\n\r\n                <CTable>\r\n                  <CTableHead style={{ backgroundColor: \"grey\", border: \"1\" }}>\r\n                    <CTableRow>\r\n                      <CTableHeaderCell scope=\"col\">Date</CTableHeaderCell>\r\n                      <CTableHeaderCell scope=\"col\">Libelle</CTableHeaderCell>\r\n                      <CTableHeaderCell scope=\"col\">\r\n                        Montant payer\r\n                      </CTableHeaderCell>\r\n                      <CTableHeaderCell scope=\"col\">Reçu par</CTableHeaderCell>\r\n                    </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                    {debtPayment &&\r\n                      debtPayment.map((detail, index) => (\r\n                        <CTableRow key={index}>\r\n                          <CTableDataCell style={style}>\r\n                            {moment(detail.date_payment).format(\r\n                              \"YYYY-MM-DD HH:mm:ss\"\r\n                            )}\r\n                          </CTableDataCell>\r\n                          <CTableDataCell style={style}>\r\n                            {detail.libelle !== \"\" ? (\r\n                              <>{detail.libelle}</>\r\n                            ) : (\r\n                              <>{detail.entry_debt_id.libelle}</>\r\n                            )}\r\n                          </CTableDataCell>\r\n                          <CTableDataCell style={style}>\r\n                            {detail.total_amount_payed > 1000 ? (\r\n                              <>\r\n                                {detail.total_amount_payed.toLocaleString()} Ar\r\n                              </>\r\n                            ) : (\r\n                              <>{detail.total_amount_payed} Ar</>\r\n                            )}\r\n                          </CTableDataCell>\r\n                          <CTableDataCell style={style}>\r\n                            {detail.received_by.name}{\" \"}\r\n                            {detail.received_by.surname}\r\n                          </CTableDataCell>\r\n                        </CTableRow>\r\n                      ))}\r\n                  </CTableBody>\r\n                </CTable>\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        </CRow>\r\n      </>\r\n    );\r\n  }\r\n\r\n  setLoading(state) {\r\n    this.setState({\r\n      loading: state,\r\n    });\r\n  }\r\n  setId(id) {\r\n    this.setState({\r\n      id: id,\r\n    });\r\n  }\r\n  setTotal(t) {\r\n    this.setState({\r\n      total: t,\r\n    });\r\n  }\r\n}\r\n"],"names":["api","link","process","Loading","React","DebtPayementDetail","props","match","state","id_customer","params","id","loading","debtPayment","error","totalAmountPayed","totalAmountToPayed","remainder","this","getDebtPayment","setLoading","fetch","method","then","res","ok","json","data","setState","parseInt","total","style","borderColor","borderStyle","borderWidth","xs","className","customer_id","name","surname","address","number_phone","gender","moment","modification_date","format","toLocaleString","color","backgroundColor","border","scope","map","detail","index","date_payment","libelle","entry_debt_id","total_amount_payed","received_by","t"],"sourceRoot":""}