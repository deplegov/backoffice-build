{"version":3,"file":"static/js/466.9773a524.chunk.js","mappings":"+GAAe,SAASA,EAAIC,GAC1B,MAAM,GAAN,OAAUC,oDAAV,YAAgDD,G,8HCC5CE,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAGH,OAHGA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MACJ,WACE,OAAO,SAAC,KAAD,QACR,EAHGA,CAAgBC,EAAAA,WAKtB,O,2ICPaC,EAAU,CAAC,UAAU,8mB,6BCsBbC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACnB,WAAYC,GAAQ,IAAD,yBACjB,cAAMA,IAWRC,YAAc,WACZ,IAAIC,EAAS,CAAC,YAEC,MADfA,EAASA,EAAOC,KAAK,QACFD,EAAM,WAAOA,IAChC,EAAKE,YAAW,GAChBC,OAAMZ,EAAAA,EAAAA,GAAI,QAAD,OAASS,IAAW,CAAEI,OAAQ,QAASC,MAAK,SAACC,GACpD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,OAAOH,MAAK,SAACI,GACtB,EAAKC,SAAS,CACZC,cAAeF,IAEjB,EAAKP,YAAW,UAvBL,EA6BnBU,cAAgB,SAACC,GACf,EAAKH,SAAS,CACZI,WAAYD,EAAEE,OAAOC,SA/BN,EAmCnBd,WAAa,SAACW,GACZ,EAAKH,SAAS,CACZO,QAASJ,KAnCX,EAAKK,MAAQ,CACXP,cAAe,GACfM,SAAS,GAJM,EAkJlB,OA5IA,yCAED,WACEE,KAAKpB,gBACN,oBA+BD,WAAU,IAAD,OACP,EAGIoB,KAAKD,MAFPD,EADF,EACEA,QACAN,EAFF,EAEEA,cAEF,OAAIM,GAAgB,SAACvB,EAAA,EAAD,KAElB,+BACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAM0B,GAAI,GAAV,UACE,UAAC,KAAD,CAAOC,UAAU,OAAjB,WACE,SAAC,KAAD,WACE,iBAAMA,UAAU,iDAAhB,UACE,iEAqBJ,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,IAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAkBC,MAAM,MAAxB,kBAGA,SAAC,KAAD,CAAkBA,MAAM,MAAxB,wBAGA,SAAC,KAAD,CAAkBA,MAAM,MAAxB,oBAGA,SAAC,KAAD,CAAkBA,MAAM,MAAxB,4CAKJ,SAAC,KAAD,UACGX,EAAcY,KAAI,SAACd,EAAMe,GAAP,OACjB,UAAC,KAAD,YACE,SAAC,KAAD,UAAiBf,EAAKgB,OACtB,SAAC,KAAD,UAAiBhB,EAAKiB,UACtB,SAAC,KAAD,UAAiBjB,EAAKkB,SACtB,SAAC,KAAD,WACE,UAAC,KAAD,CACEC,MAAO,QACPC,QAAS,kBACP,EAAK/B,MAAMgC,QAAQC,KAAnB,wBACmBtB,EAAKuB,MAJ5B,WAQE,SAAC,IAAD,CAAOC,KAAMrC,IARf,qBALY4B,0BAmDnC,EAnJkB3B,CAAqBF,EAAAA","sources":["const/api.js","views/pages/Loading.js","../node_modules/@coreui/icons/js/free/cil-info.js","views/pages/registration/registration.js"],"sourcesContent":["export default function api(link) {\r\n  return `${process.env.REACT_APP_BACKEND_HOST}/${link}`;\r\n}\r\n","import React from \"react\";\r\nimport { CSpinner } from \"@coreui/react\";\r\nclass Loading extends React.Component {\r\n  render() {\r\n    return <CSpinner />;\r\n  }\r\n}\r\nexport default Loading;\r\n","export const cilInfo = [\"512 512\",\"<rect width='34.924' height='34.924' x='256' y='95.998' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M16,496H496V16H16ZM48,48H464V464H48Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M285.313,359.032a18.123,18.123,0,0,1-15.6,8.966,18.061,18.061,0,0,1-17.327-23.157l35.67-121.277A49.577,49.577,0,0,0,194.7,190.572l-11.718,28.234,29.557,12.266,11.718-28.235a17.577,17.577,0,0,1,33.1,11.7l-35.67,121.277A50.061,50.061,0,0,0,269.709,400a50.227,50.227,0,0,0,43.25-24.853l15.1-25.913-27.646-16.115Z' class='ci-primary'/>\"]","import React from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CButton,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { cilInfo } from \"@coreui/icons\";\r\nimport Loading from \"../Loading\";\r\nimport api from \"../../../const/api\";\r\n// import api from \"../../../const/api\";\r\n// import Moment from \"moment\";\r\n\r\nexport default class Registration extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      registrations: [],\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUserData();\r\n  }\r\n\r\n  getUserData = () => {\r\n    let wheres = [`valide=0`];\r\n    wheres = wheres.join(\"&\");\r\n    if (wheres !== \"\") wheres = `?${wheres}`;\r\n    this.setLoading(true);\r\n    fetch(api(`users${wheres}`), { method: \"GET\" }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json().then((data) => {\r\n          this.setState({\r\n            registrations: data,\r\n          });\r\n          this.setLoading(false);\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  setTypeFilter = (e) => {\r\n    this.setState({\r\n      typeFilter: e.target.value,\r\n    });\r\n  };\r\n\r\n  setLoading = (e) => {\r\n    this.setState({\r\n      loading: e,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      registrations,\r\n    } = this.state;\r\n    if (loading) return <Loading />;\r\n    return (\r\n      <>\r\n        <CRow>\r\n          <CCol xs={12}>\r\n            <CCard className=\"mb-4\">\r\n              <CCardHeader>\r\n                <span className=\"d-grid gap-2 d-md-flex justify-content-between\">\r\n                  <strong>Validation des inscriptions</strong>\r\n                  {/* <CInputGroup style={{ width: \"300px\" }}>\r\n                    <CInputGroupText\r\n                      component=\"label\"\r\n                      htmlFor=\"inputGroupSelect01\"\r\n                    >\r\n                      Type de compte\r\n                    </CInputGroupText>\r\n                    <CFormSelect\r\n                      id=\"accountType\"\r\n                      onChange={this.setTypeFilter}\r\n                      value={typeFilter}\r\n                      required\r\n                    >\r\n                      <option value={0}>Tout</option>\r\n                      <option value={1}>Personne</option>\r\n                      <option value={2}>Entreprise</option>\r\n                    </CFormSelect>\r\n                  </CInputGroup> */}\r\n                </span>\r\n              </CCardHeader>\r\n              <CCardBody>\r\n                <CTable>\r\n                  <CTableHead>\r\n                    <CTableRow>\r\n                      <CTableHeaderCell scope=\"col\">\r\n                        Nom\r\n                      </CTableHeaderCell>\r\n                      <CTableHeaderCell scope=\"col\">\r\n                        Prénom\r\n                      </CTableHeaderCell>\r\n                      <CTableHeaderCell scope=\"col\">\r\n                        Email\r\n                      </CTableHeaderCell>\r\n                      <CTableHeaderCell scope=\"col\">\r\n                        Détails et validation\r\n                      </CTableHeaderCell>\r\n                    </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                    {registrations.map((data, index) => (\r\n                      <CTableRow key={index}>\r\n                        <CTableDataCell>{data.NOM}</CTableDataCell>\r\n                        <CTableDataCell>{data.PRENOM}</CTableDataCell>\r\n                        <CTableDataCell>{data.EMAIL}</CTableDataCell>\r\n                        <CTableDataCell>\r\n                          <CButton\r\n                            color={\"light\"}\r\n                            onClick={() =>\r\n                              this.props.history.push(\r\n                                `/registration/${data.ID}`\r\n                              )\r\n                            }\r\n                          >\r\n                            <CIcon icon={cilInfo} /> Détails\r\n                          </CButton>\r\n                        </CTableDataCell>\r\n                      </CTableRow>\r\n                    ))}\r\n                  </CTableBody>\r\n                </CTable>\r\n                {/* <CPagination aria-label=\"Page navigation example\">\r\n                  <CPaginationItem\r\n                    aria-label=\"Previous\"\r\n                    disabled={pageList === 1}\r\n                    onClick={() => this.getUserData(pageList - 1, pageNumber)}\r\n                  >\r\n                    <span aria-hidden=\"true\">&laquo;</span>\r\n                  </CPaginationItem>\r\n                  {pagination.map((page, index) => (\r\n                    <CPaginationItem\r\n                      key={index}\r\n                      active={page === pageList}\r\n                      onClick={() => this.getUserData(page, pageNumber)}\r\n                    >\r\n                      {` ${page} `}\r\n                    </CPaginationItem>\r\n                  ))}\r\n                  <CPaginationItem\r\n                    aria-label=\"Next\"\r\n                    disabled={totalPage - pageList === 0}\r\n                    onClick={() => this.getUserData(pageList + 1, pageNumber)}\r\n                  >\r\n                    <span aria-hidden=\"true\"> &raquo; </span>\r\n                  </CPaginationItem>\r\n                </CPagination> */}\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        </CRow>\r\n      </>\r\n    );\r\n  }\r\n}\r\n"],"names":["api","link","process","Loading","React","cilInfo","Registration","props","getUserData","wheres","join","setLoading","fetch","method","then","res","ok","json","data","setState","registrations","setTypeFilter","e","typeFilter","target","value","loading","state","this","xs","className","scope","map","index","NOM","PRENOM","EMAIL","color","onClick","history","push","ID","icon"],"sourceRoot":""}