{"version":3,"file":"static/js/975.b0df4845.chunk.js","mappings":"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","sources":["const/api.js","views/pages/Loading.js","views/pages/entry/listEntry.js","../node_modules/@coreui/icons/js/free/cil-plus.js","../node_modules/@coreui/icons/js/free/cil-trash.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["export default function api(link) {\r\n  return `${process.env.REACT_APP_BACKEND_HOST}/${link}`;\r\n}\r\n","import React from \"react\";\r\nimport { CSpinner } from \"@coreui/react\";\r\nclass Loading extends React.Component {\r\n  render() {\r\n    return <CSpinner />;\r\n  }\r\n}\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CButton,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CPaginationItem,\r\n  CPagination,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { cilTrash, cilPlus } from \"@coreui/icons\";\r\nimport api from \"../../../const/api\";\r\nimport Loading from \"../Loading\";\r\nimport moment from \"moment/moment\";\r\n\r\nexport default class ListEntry extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      formModalState: false,\r\n      deleteModalState: false,\r\n      loading: true,\r\n      entry: null,\r\n      error: \"\",\r\n      role: \"\",\r\n      id: 0,\r\n      pagination: [],\r\n      totalPage: 0,\r\n      pageList: 1,\r\n      pageNumber: 10,\r\n      customer: \"\",\r\n      option: \"none\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (sessionStorage.getItem(\"user\")) {\r\n      const user = JSON.parse(sessionStorage.getItem(\"user\"));\r\n      this.setRole(user.role_id.entitled);\r\n    }\r\n    this.getEntryData(1, null, \"none\", \"customer\", 0, \"service\");\r\n  }\r\n\r\n  pagination = (totalPages) => {\r\n    let page = [];\r\n    for (let i = 1; i <= totalPages; i++) {\r\n      page.push(i);\r\n    }\r\n    this.setState({ pagination: page });\r\n  };\r\n\r\n  getEntryData = (page, pageNumber, option, group, customer, service) => {\r\n    this.setLoading(true);\r\n    fetch(api(`entry/${group}/${option}/${customer}/${service}/page/${page}`), {\r\n      method: \"GET\",\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json().then((data) => {\r\n          this.setState({\r\n            entry: data.entry,\r\n            pageList: page,\r\n            pageNumber: pageNumber,\r\n            totalPage: data.pagination.totalPages,\r\n          });\r\n          this.pagination(data.pagination.totalPages);\r\n          this.setLoading(false);\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  cancelFormModal = () => {\r\n    this.setFormModalState(false);\r\n    this.clearFields();\r\n    this.setError();\r\n  };\r\n\r\n  deleteEntry() {\r\n    fetch(api(`entry/${this.state.entry[this.state.id].id}`), {\r\n      method: \"DELETE\",\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        const tmp = [...this.state.entry];\r\n        tmp.splice(this.state.id, 1);\r\n        this.setState({\r\n          entry: tmp,\r\n        });\r\n        this.setDeleteModalState(false);\r\n        this.props.history.push(\"/entry/list\");\r\n      }\r\n    });\r\n  }\r\n\r\n  entryToDelete(index) {\r\n    this.setId(index);\r\n    this.setDeleteModalState(true);\r\n  }\r\n\r\n  entryDetails(name, surname, id_customer, option, service, condition) {\r\n    let id = 0;\r\n    if (condition === \"customer\") {\r\n      if (id_customer != null) {\r\n        this.setCustomer(`${name}${\" \"}${surname}`);\r\n        id = id_customer;\r\n      } else {\r\n        id = 0;\r\n        this.setCustomer(`Inconnu`);\r\n      }\r\n    } else if (condition === \"service\") {\r\n      this.setCustomer(`${surname}`);\r\n      if (id_customer != null) {\r\n        id = id_customer;\r\n      } else {\r\n        id = 0;\r\n      }\r\n    }\r\n\r\n    this.reload(option, \"service\", id, service);\r\n  }\r\n\r\n  reload(option, group, customer, service) {\r\n    this.setOption(option);\r\n    this.getEntryData(1, null, option, group, customer, service);\r\n  }\r\n\r\n  addEntry() {\r\n    this.props.history.push(\"/entry/insert\");\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      entry,\r\n      role,\r\n      loading,\r\n      pagination,\r\n      pageNumber,\r\n      totalPage,\r\n      pageList,\r\n      option,\r\n      customer,\r\n      id,\r\n      deleteModalState,\r\n    } = this.state;\r\n    if (loading) {\r\n      return <Loading />;\r\n    }\r\n    return (\r\n      <>\r\n        {option === \"none\" ? (\r\n          <CRow>\r\n            <CCol xs={12}>\r\n              <CCard className=\"mb-4\">\r\n                <CCardHeader>\r\n                  <span className=\"d-grid gap-2 d-md-flex justify-content-between\">\r\n                    <strong>Liste des entrées par client</strong>\r\n                    <CButton color={\"primary\"} onClick={() => this.addEntry()}>\r\n                      <CIcon icon={cilPlus} className=\"me-2\" />\r\n                      Ajouter\r\n                    </CButton>\r\n                  </span>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                  <CTable>\r\n                    <CTableHead>\r\n                      <CTableRow>\r\n                        <CTableHeaderCell scope=\"col\">Nom</CTableHeaderCell>\r\n                        <CTableHeaderCell scope=\"col\">\r\n                          Prénom(s)\r\n                        </CTableHeaderCell>\r\n                        <CTableHeaderCell scope=\"col\">\r\n                          Montant Total\r\n                        </CTableHeaderCell>\r\n                      </CTableRow>\r\n                    </CTableHead>\r\n                    <CTableBody>\r\n                      {entry &&\r\n                        entry.map((e, index) => (\r\n                          <CTableRow key={index}>\r\n                            {!e.name && !e.surname ? (\r\n                              <>\r\n                                <CTableDataCell>Inconnu</CTableDataCell>\r\n                                <CTableDataCell>Inconnu</CTableDataCell>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <CTableDataCell>{e.name}</CTableDataCell>\r\n                                <CTableDataCell>{e.surname}</CTableDataCell>\r\n                              </>\r\n                            )}\r\n\r\n                            <CTableDataCell>\r\n                              {Number(e.total_amount) > 1000 ? (\r\n                                <>\r\n                                  {Number(e.total_amount).toLocaleString()} Ar\r\n                                </>\r\n                              ) : (\r\n                                <>{e.total_amount} Ar</>\r\n                              )}\r\n                            </CTableDataCell>\r\n                            <CTableDataCell>\r\n                              <CButton\r\n                                color={\"light\"}\r\n                                onClick={() =>\r\n                                  this.entryDetails(\r\n                                    e.name,\r\n                                    e.surname,\r\n                                    e.id,\r\n                                    \"findCustomer\",\r\n                                    \"service\",\r\n                                    \"customer\"\r\n                                  )\r\n                                }\r\n                              >\r\n                                Voir\r\n                              </CButton>\r\n                            </CTableDataCell>\r\n                          </CTableRow>\r\n                        ))}\r\n                    </CTableBody>\r\n                  </CTable>\r\n\r\n                  <CPagination aria-label=\"Page navigation example\">\r\n                    <CPaginationItem\r\n                      aria-label=\"Previous\"\r\n                      disabled={pageList === 1}\r\n                      onClick={() =>\r\n                        this.getEntryData(pageList - 1, pageNumber)\r\n                      }\r\n                    >\r\n                      <span aria-hidden=\"true\">&laquo;</span>\r\n                    </CPaginationItem>\r\n                    {pagination.map((page, index) => (\r\n                      <CPaginationItem\r\n                        key={index}\r\n                        active={page === pageList}\r\n                        onClick={() => this.getEntryData(page, pageNumber)}\r\n                      >\r\n                        {` ${page} `}\r\n                      </CPaginationItem>\r\n                    ))}\r\n                    <CPaginationItem\r\n                      aria-label=\"Next\"\r\n                      disabled={\r\n                        totalPage - pageList === 0 || entry.length === 0\r\n                      }\r\n                      onClick={() =>\r\n                        this.getEntryData(pageList + 1, pageNumber)\r\n                      }\r\n                    >\r\n                      <span aria-hidden=\"true\"> &raquo; </span>\r\n                    </CPaginationItem>\r\n                  </CPagination>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n        ) : option === \"findCustomer\" ? (\r\n          <CRow>\r\n            <CCol xs={12}>\r\n              <CCard className=\"mb-4\">\r\n                <CCardHeader>\r\n                  <span className=\"d-grid gap-2 d-md-flex justify-content-between\">\r\n                    <strong>\r\n                      Liste des entrées par service de : {customer}\r\n                    </strong>\r\n                    <CButton color={\"primary\"} onClick={() => this.addEntry()}>\r\n                      <CIcon icon={cilPlus} className=\"me-2\" />\r\n                      Ajouter\r\n                    </CButton>\r\n                  </span>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                  <CTable>\r\n                    <CTableHead>\r\n                      <CTableRow>\r\n                        <CTableHeaderCell scope=\"col\">libelle</CTableHeaderCell>\r\n                        <CTableHeaderCell scope=\"col\">\r\n                          Quantité total\r\n                        </CTableHeaderCell>\r\n                        <CTableHeaderCell scope=\"col\">\r\n                          Prix unitaire\r\n                        </CTableHeaderCell>\r\n                        <CTableHeaderCell scope=\"col\">\r\n                          Montant total\r\n                        </CTableHeaderCell>\r\n                      </CTableRow>\r\n                    </CTableHead>\r\n                    <CTableBody>\r\n                      {entry &&\r\n                        entry.map((e, index) => (\r\n                          <CTableRow key={index}>\r\n                            <CTableDataCell>{e.libelle}</CTableDataCell>\r\n                            <CTableDataCell>{e.sum_quantity}</CTableDataCell>\r\n                            <CTableDataCell>\r\n                              {Number(e.unit_price) > 1000 ? (\r\n                                <>{Number(e.unit_price).toLocaleString()} Ar</>\r\n                              ) : (\r\n                                <>{e.unit_price} Ar</>\r\n                              )}\r\n                            </CTableDataCell>\r\n                            <CTableDataCell>\r\n                              {Number(e.total_amount) > 1000 ? (\r\n                                <>\r\n                                  {Number(e.total_amount).toLocaleString()} Ar\r\n                                </>\r\n                              ) : (\r\n                                <>{e.total_amount} Ar</>\r\n                              )}\r\n                            </CTableDataCell>\r\n                            <CTableDataCell>\r\n                              <CButton\r\n                                color={\"light\"}\r\n                                onClick={() =>\r\n                                  this.entryDetails(\r\n                                    \"\",\r\n                                    e.libelle,\r\n                                    e.customer_id,\r\n                                    \"findService\",\r\n                                    e.libelle,\r\n                                    \"service\"\r\n                                  )\r\n                                }\r\n                              >\r\n                                Voir\r\n                              </CButton>\r\n                            </CTableDataCell>\r\n                            <CTableDataCell>\r\n                              <CButton\r\n                                color={\"light\"}\r\n                                onClick={() =>\r\n                                  this.reload(\"none\", \"customer\", 0, \"service\")\r\n                                }\r\n                              >\r\n                                Retour\r\n                              </CButton>\r\n                            </CTableDataCell>\r\n                          </CTableRow>\r\n                        ))}\r\n                    </CTableBody>\r\n                  </CTable>\r\n\r\n                  <CPagination aria-label=\"Page navigation example\">\r\n                    <CPaginationItem\r\n                      aria-label=\"Previous\"\r\n                      disabled={pageList === 1}\r\n                      onClick={() =>\r\n                        this.getEntryData(pageList - 1, pageNumber)\r\n                      }\r\n                    >\r\n                      <span aria-hidden=\"true\">&laquo;</span>\r\n                    </CPaginationItem>\r\n                    {pagination.map((page, index) => (\r\n                      <CPaginationItem\r\n                        key={index}\r\n                        active={page === pageList}\r\n                        onClick={() => this.getEntryData(page, pageNumber)}\r\n                      >\r\n                        {` ${page} `}\r\n                      </CPaginationItem>\r\n                    ))}\r\n                    <CPaginationItem\r\n                      aria-label=\"Next\"\r\n                      disabled={\r\n                        totalPage - pageList === 0 || entry.length === 0\r\n                      }\r\n                      onClick={() =>\r\n                        this.getEntryData(pageList + 1, pageNumber)\r\n                      }\r\n                    >\r\n                      <span aria-hidden=\"true\"> &raquo; </span>\r\n                    </CPaginationItem>\r\n                  </CPagination>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n        ) : option === \"findService\" ? (\r\n          <>\r\n            <CRow>\r\n              <CCol xs={12}>\r\n                <CCard className=\"mb-4\">\r\n                  <CCardHeader>\r\n                    <span className=\"d-grid gap-2 d-md-flex justify-content-between\">\r\n                      <strong>Détails entrée du service : {customer}</strong>\r\n                      <CButton\r\n                        color={\"primary\"}\r\n                        onClick={() => this.addEntry()}\r\n                      >\r\n                        <CIcon icon={cilPlus} className=\"me-2\" />\r\n                        Ajouter\r\n                      </CButton>\r\n                    </span>\r\n                  </CCardHeader>\r\n                  <CCardBody>\r\n                    <CTable>\r\n                      <CTableHead>\r\n                        <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">\r\n                            Date de creation\r\n                          </CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">\r\n                            Libelle\r\n                          </CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">\r\n                            Quantité\r\n                          </CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">\r\n                            Prix unitaire\r\n                          </CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">\r\n                            Montant Total\r\n                          </CTableHeaderCell>\r\n                        </CTableRow>\r\n                      </CTableHead>\r\n                      <CTableBody>\r\n                        {entry &&\r\n                          entry.map((e, index) => (\r\n                            <CTableRow key={index}>\r\n                              <CTableDataCell>\r\n                                {moment(e.created_date).format(\r\n                                  \"YYYY-MM-DD HH:mm:ss\"\r\n                                )}\r\n                              </CTableDataCell>\r\n                              <CTableDataCell>{e.libelle}</CTableDataCell>\r\n                              <CTableDataCell>{e.quantity}</CTableDataCell>\r\n                              <CTableDataCell>\r\n                                {Number(e.unit_price) > 1000 ? (\r\n                                  <>\r\n                                    {Number(e.unit_price).toLocaleString()} Ar\r\n                                  </>\r\n                                ) : (\r\n                                  <>{e.unit_price} Ar</>\r\n                                )}\r\n                              </CTableDataCell>\r\n                              <CTableDataCell>\r\n                                {Number(e.total_amount) > 1000 ? (\r\n                                  <>\r\n                                    {Number(e.total_amount).toLocaleString()} Ar\r\n                                  </>\r\n                                ) : (\r\n                                  <>{e.total_amount} Ar</>\r\n                                )}\r\n                              </CTableDataCell>\r\n                              {role === \"Administrateur\" ? (\r\n                                <>\r\n                                  <CTableDataCell>\r\n                                    <CButton\r\n                                      color={\"danger\"}\r\n                                      onClick={() => this.entryToDelete(index)}\r\n                                    >\r\n                                      <CIcon icon={cilTrash} />\r\n                                    </CButton>\r\n                                  </CTableDataCell>\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                              <CTableDataCell>\r\n                                <CButton\r\n                                  color={\"light\"}\r\n                                  onClick={() =>\r\n                                    this.reload(\r\n                                      \"none\",\r\n                                      \"customer\",\r\n                                      0,\r\n                                      \"service\"\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  Retour\r\n                                </CButton>\r\n                              </CTableDataCell>\r\n                            </CTableRow>\r\n                          ))}\r\n                      </CTableBody>\r\n                    </CTable>\r\n\r\n                    <CPagination aria-label=\"Page navigation example\">\r\n                      <CPaginationItem\r\n                        aria-label=\"Previous\"\r\n                        disabled={pageList === 1}\r\n                        onClick={() =>\r\n                          this.getEntryData(pageList - 1, pageNumber)\r\n                        }\r\n                      >\r\n                        <span aria-hidden=\"true\">&laquo;</span>\r\n                      </CPaginationItem>\r\n                      {pagination.map((page, index) => (\r\n                        <CPaginationItem\r\n                          key={index}\r\n                          active={page === pageList}\r\n                          onClick={() => this.getEntryData(page, pageNumber)}\r\n                        >\r\n                          {` ${page} `}\r\n                        </CPaginationItem>\r\n                      ))}\r\n                      <CPaginationItem\r\n                        aria-label=\"Next\"\r\n                        disabled={\r\n                          totalPage - pageList === 0 ||\r\n                          (entry && entry.length === 0)\r\n                        }\r\n                        onClick={() =>\r\n                          this.getEntryData(pageList + 1, pageNumber)\r\n                        }\r\n                      >\r\n                        <span aria-hidden=\"true\"> &raquo; </span>\r\n                      </CPaginationItem>\r\n                    </CPagination>\r\n                  </CCardBody>\r\n                </CCard>\r\n              </CCol>\r\n            </CRow>\r\n            <CModal\r\n              alignment=\"center\"\r\n              visible={deleteModalState}\r\n              onClose={() => this.setDeleteModalState(false)}\r\n            >\r\n              <CModalHeader>\r\n                <CModalTitle>Supprimer</CModalTitle>\r\n              </CModalHeader>\r\n              <CModalBody>\r\n                <p>\r\n                  Voulez vous supprimer{\" \"}\r\n                  {entry &&\r\n                    entry.length > 0 &&\r\n                    id < entry.length &&\r\n                    entry[id].libelle}\r\n                  ?\r\n                </p>\r\n              </CModalBody>\r\n              <CModalFooter>\r\n                <CButton\r\n                  color=\"secondary\"\r\n                  onClick={() => this.setDeleteModalState(false)}\r\n                >\r\n                  Annuler\r\n                </CButton>\r\n                <CButton color=\"danger\" onClick={() => this.deleteEntry()}>\r\n                  Supprimer\r\n                </CButton>\r\n              </CModalFooter>\r\n            </CModal>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  setOffset = (o) => {\r\n    this.setState({\r\n      offset: o,\r\n    });\r\n  };\r\n  setLimit = (l) => {\r\n    this.setState({\r\n      limit: l,\r\n    });\r\n  };\r\n  setLoading(state) {\r\n    this.setState({\r\n      loading: state,\r\n    });\r\n  }\r\n  setOption(op) {\r\n    this.setState({\r\n      option: op,\r\n    });\r\n  }\r\n  setCustomer(custom) {\r\n    this.setState({\r\n      customer: custom,\r\n    });\r\n  }\r\n  setRole(r) {\r\n    this.setState({\r\n      role: r,\r\n    });\r\n  }\r\n  setId(id) {\r\n    this.setState({\r\n      id: id,\r\n    });\r\n  }\r\n  setDeleteModalState(modal) {\r\n    this.setState({\r\n      deleteModalState: modal,\r\n    });\r\n  }\r\n}\r\n","export const cilPlus = [\"512 512\",\"<polygon fill='var(--ci-primary-color, currentColor)' points='440 240 272 240 272 72 240 72 240 240 72 240 72 272 240 272 240 440 272 440 272 272 440 272 440 240' class='ci-primary'/>\"]","export const cilTrash = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M96,472a23.82,23.82,0,0,0,23.579,24H392.421A23.82,23.82,0,0,0,416,472V152H96Zm32-288H384V464H128Z' class='ci-primary'/><rect width='32' height='200' x='168' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='200' x='240' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='200' x='312' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M328,88V40c0-13.458-9.488-24-21.6-24H205.6C193.488,16,184,26.542,184,40V88H64v32H448V88ZM216,48h80V88H216Z' class='ci-primary'/>\"]","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["api","link","process","Loading","React","ListEntry","props","pagination","totalPages","page","i","push","setState","getEntryData","pageNumber","option","group","customer","service","setLoading","fetch","method","then","res","ok","json","data","entry","pageList","totalPage","cancelFormModal","setFormModalState","clearFields","setError","setOffset","o","offset","setLimit","l","limit","state","formModalState","deleteModalState","loading","error","role","id","sessionStorage","getItem","user","JSON","parse","this","setRole","role_id","entitled","tmp","splice","setDeleteModalState","history","index","setId","name","surname","id_customer","condition","setCustomer","reload","setOption","xs","className","color","onClick","addEntry","icon","cilPlus","scope","map","e","Number","total_amount","toLocaleString","entryDetails","disabled","active","length","libelle","sum_quantity","unit_price","customer_id","moment","created_date","format","quantity","entryToDelete","cilTrash","alignment","visible","onClose","deleteEntry","op","custom","r","modal","_arrayLikeToArray","arr","len","arr2","Array","_toConsumableArray","isArray","iter","Symbol","iterator","from","minLen","n","Object","prototype","toString","call","slice","constructor","test","TypeError"],"sourceRoot":""}