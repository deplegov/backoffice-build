{"version":3,"file":"static/js/652.4f322d10.chunk.js","mappings":"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","sources":["const/api.js","views/pages/Loading.js","views/pages/customer/updateCustomer.js"],"sourcesContent":["export default function api(link) {\r\n  return `${process.env.REACT_APP_BACKEND_HOST}/${link}`;\r\n}\r\n","import React from \"react\";\r\nimport { CSpinner } from \"@coreui/react\";\r\nclass Loading extends React.Component {\r\n  render() {\r\n    return <CSpinner />;\r\n  }\r\n}\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CFormInput,\r\n  CInputGroup,\r\n  CInputGroupText,\r\n  CRow,\r\n  CFormSelect,\r\n} from \"@coreui/react\";\r\nimport api from \"../../../const/api\";\r\nimport Loading from \"../Loading\";\r\n\r\nexport default class UpdateCustomer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { match } = props;\r\n    this.state = {\r\n      customer_id: match && match.params && match.params.id,\r\n      name: \"\",\r\n      surname: \"\",\r\n      number_phone: \"\",\r\n      gender: \"\",\r\n      address: \"\",\r\n      email: \"\",\r\n      customer: null,\r\n      ready: false,\r\n      error: \"\",\r\n      load: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCustomer();\r\n  }\r\n\r\n  getCustomer() {\r\n    this.setReady(false);\r\n    fetch(api(`customer/${this.state.customer_id}`), { method: \"GET\" }).then(\r\n      (res) => {\r\n        if (res.ok)\r\n          res.json().then((data) => {\r\n            if (data) {\r\n              this.setState({\r\n                customer: data,\r\n                name: data.name,\r\n                surname: data.surname,\r\n                gender: data.gender,\r\n                address: data.address,\r\n                number_phone: data.number_phone,\r\n                email: data.email,\r\n                ready: true,\r\n              });\r\n              if (data.email === null) {\r\n                this.setState({ email: \"\" });\r\n              }\r\n            }\r\n          });\r\n      }\r\n    );\r\n  }\r\n\r\n  updateCustomer() {\r\n    this.setLoad(true);\r\n    fetch(api(`customer/${this.state.customer_id}`), {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      method: \"PUT\",\r\n      body: JSON.stringify({\r\n        name: this.state.name,\r\n        surname: this.state.surname,\r\n        gender: this.state.gender,\r\n        address: this.state.address,\r\n        number_phone: this.state.number_phone,\r\n        email: this.state.email,\r\n        modification_date: new Date(),\r\n      }),\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        console.log(res);\r\n        this.setError(\"Modification réussie\");\r\n        this.setLoad(false);\r\n        this.props.history.push(\"/Home\");\r\n      } else\r\n        res.json().then((res) => {\r\n          this.setError(res.message);\r\n          this.setLoad(false);\r\n        });\r\n    });\r\n  }\r\n  render() {\r\n    const {\r\n      name,\r\n      surname,\r\n      gender,\r\n      customer,\r\n      address,\r\n      number_phone,\r\n      email,\r\n      ready,\r\n      error,\r\n      load,\r\n    } = this.state;\r\n    return (\r\n      <div className=\"bg-light min-vh-50 d-flex flex-row align-items-center\">\r\n        {!ready ? (\r\n          <>\r\n            <Loading></Loading>\r\n          </>\r\n        ) : (\r\n          <CContainer>\r\n            {\" \"}\r\n            <CRow className=\"justify-content-center\">\r\n              <CCol md={9} lg={9} xl={6}>\r\n                <CCard className=\"mx-4\">\r\n                  <CCardBody className=\"p-4\">\r\n                    <CForm\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                      }}\r\n                    >\r\n                      <h1>Modification Customer</h1>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CInputGroupText>Nom</CInputGroupText>\r\n                        <CFormInput\r\n                          type=\"text\"\r\n                          placeholder={customer.name}\r\n                          autoComplete=\"Nom\"\r\n                          value={name}\r\n                          onChange={this.setName}\r\n                        />\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CInputGroupText>Prénom</CInputGroupText>\r\n                        <CFormInput\r\n                          type=\"text\"\r\n                          placeholder={customer.surname}\r\n                          autoComplete=\"Prénom\"\r\n                          value={surname}\r\n                          onChange={this.setSurname}\r\n                        />\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CInputGroupText\r\n                          component=\"label\"\r\n                          htmlFor=\"inputGroupSelect01\"\r\n                        >\r\n                          Genre\r\n                        </CInputGroupText>\r\n                        <CFormSelect\r\n                          id=\"inputGroupSelect01\"\r\n                          onChange={this.setGender}\r\n                          value={gender}\r\n                          required\r\n                        >\r\n                          <option value={\"M\"}>Homme</option>\r\n                          <option value={\"F\"}>Femme</option>\r\n                        </CFormSelect>\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CInputGroupText>Adresse</CInputGroupText>\r\n                        <CFormInput\r\n                          type=\"text\"\r\n                          placeholder={customer.address}\r\n                          autoComplete=\"Adresse\"\r\n                          value={address}\r\n                          onChange={this.setAddress}\r\n                        />\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CInputGroupText>Numéro de téléphone</CInputGroupText>\r\n                        <CFormInput\r\n                          type=\"number\"\r\n                          placeholder={customer.number_phone}\r\n                          autoComplete=\"Numéro de téléphone\"\r\n                          value={number_phone}\r\n                          onChange={this.setNumberPhone}\r\n                        />\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CInputGroupText>@</CInputGroupText>\r\n                        <CFormInput\r\n                          type=\"email\"\r\n                          placeholder={customer.email}\r\n                          autoComplete=\"Email\"\r\n                          value={email}\r\n                          onChange={this.setEmail}\r\n                        />\r\n                      </CInputGroup>\r\n                      <div className=\"d-grid\">\r\n                        {load ? (\r\n                          <CButton\r\n                            id=\"aim-color-green\"\r\n                            className=\"px-4\"\r\n                            disabled\r\n                          >\r\n                            <Loading></Loading>\r\n                          </CButton>\r\n                        ) : (\r\n                          <CButton\r\n                            color=\"success\"\r\n                            type=\"submit\"\r\n                            onClick={() => this.updateCustomer()}\r\n                          >\r\n                            Modifier\r\n                          </CButton>\r\n                        )}\r\n                        <label>{error}</label>\r\n                      </div>\r\n                    </CForm>\r\n                  </CCardBody>\r\n                </CCard>\r\n              </CCol>\r\n            </CRow>\r\n          </CContainer>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  setName = (e) => {\r\n    this.setState({\r\n      name: e.target.value,\r\n    });\r\n  };\r\n  setSurname = (e) => {\r\n    this.setState({\r\n      surname: e.target.value,\r\n    });\r\n  };\r\n  setGender = (e) => {\r\n    this.setState({\r\n      gender: e.target.value,\r\n    });\r\n  };\r\n  setAddress = (e) => {\r\n    this.setState({\r\n      address: e.target.value,\r\n    });\r\n  };\r\n  setNumberPhone = (e) => {\r\n    this.setState({\r\n      number_phone: e.target.value,\r\n    });\r\n  };\r\n  setEmail = (e) => {\r\n    this.setState({\r\n      email: e.target.value,\r\n    });\r\n  };\r\n  setLoad(l) {\r\n    this.setState({\r\n      load: l,\r\n    });\r\n  }\r\n  setReady(load) {\r\n    this.setState({\r\n      ready: load,\r\n    });\r\n  }\r\n\r\n  setError = (err) => {\r\n    this.setState({\r\n      error: err,\r\n    });\r\n  };\r\n}\r\n"],"names":["api","link","process","Loading","React","UpdateCustomer","props","setName","e","setState","name","target","value","setSurname","surname","setGender","gender","setAddress","address","setNumberPhone","number_phone","setEmail","email","setError","err","error","match","state","customer_id","params","id","customer","ready","load","this","getCustomer","setReady","fetch","method","then","res","ok","json","data","setLoad","headers","body","JSON","stringify","modification_date","Date","console","log","history","push","message","className","md","lg","xl","onSubmit","preventDefault","type","placeholder","autoComplete","onChange","component","htmlFor","required","disabled","color","onClick","updateCustomer","l"],"sourceRoot":""}