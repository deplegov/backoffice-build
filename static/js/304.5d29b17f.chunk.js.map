{"version":3,"file":"static/js/304.5d29b17f.chunk.js","mappings":"+GAAe,SAASA,EAAIC,GAC1B,MAAM,GAAN,OAAUC,mDAAV,YAAgDD,G,qLCgB7BE,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACnB,WAAYC,GAAQ,IAAD,kBACjB,IAAQC,EAAUD,EAAVC,MADS,OAEjB,cAAMD,IACDE,MAAQ,CACXC,QAASF,GAASA,EAAMG,QAAUH,EAAMG,OAAOC,GAC/CC,SAAS,EACTC,WAAY,KACZC,SAAS,EACTC,MAAO,IARQ,EA8JlB,OApJA,yCAED,WACEC,KAAKC,YACN,qBAED,WAAW,IAAD,OACRD,KAAKE,YAAW,GAChBC,OAAMjB,EAAAA,EAAAA,GAAI,eAAD,OAAgBc,KAAKR,MAAMC,UAAY,CAAEW,OAAQ,QAASC,MACjE,SAACC,GACKA,EAAIC,IACND,EAAIE,OAAOH,MAAK,SAACI,GACXA,GAAQA,EAAKZ,YACf,EAAKa,SAAS,CACZb,WAAYY,EAAKZ,WACjBD,SAAS,Y,0BAmCvB,WACEI,KAAKV,MAAMQ,QAAQa,KAAK,gBACzB,oBAED,WAAU,IAAD,OACP,EAAgCX,KAAKR,MAA7BK,EAAR,EAAQA,WAAYD,EAApB,EAAoBA,QACpB,OACE,8BACGA,GACC,yBAEA,SAAC,KAAD,WACE,SAAC,KAAD,CAAMgB,GAAI,GAAV,UACE,UAAC,KAAD,CAAOC,UAAU,OAAjB,WACE,UAAC,KAAD,CACEC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAD5C,WAGE,8DACiC,IAC9BnB,EAAW,GAAGoB,gBAAkB,KAC/B,gCAAGpB,EAAW,GAAGoB,gBAAgBC,iBAAjC,UAEA,gCAAGrB,EAAW,GAAGoB,gBAAjB,aAYJ,SAAC,KAAD,CAASE,MAAO,QAASC,QAAS,kBAAM,EAAKC,gBAA7C,wBAIF,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,IAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAkBC,MAAM,MAAxB,sBACA,SAAC,KAAD,CAAkBA,MAAM,MAAxB,0BAGA,SAAC,KAAD,CAAkBA,MAAM,MAAxB,4BAGA,SAAC,KAAD,CAAkBA,MAAM,MAAxB,8BAKJ,SAAC,KAAD,UACGzB,GACCA,EAAW0B,KAAI,SAACC,EAAQC,GAAT,OACb,UAAC,KAAD,YACE,SAAC,KAAD,UAAiBD,EAAOE,YAExB,SAAC,KAAD,UAAiBF,EAAOG,YAExB,SAAC,KAAD,UACGH,EAAOI,UAAY,KAClB,gCAAGJ,EAAOI,UAAUV,iBAApB,UAEA,gCAAGM,EAAOI,UAAV,YAGJ,SAAC,KAAD,UACGJ,EAAOK,YAAc,KACpB,gCAAGL,EAAOK,YAAYX,iBAAtB,UAEA,gCAAGM,EAAOK,YAAV,aAhBUJ,wBA8BvC,wBAED,SAAWjC,GACTQ,KAAKU,SAAS,CACZd,QAASJ,MAEZ,mBACD,SAAMG,GACJK,KAAKU,SAAS,CACZf,GAAIA,QAEP,EA/JkBN,CAAmByC,EAAAA","sources":["const/api.js","views/pages/debt/debtDetail.js"],"sourcesContent":["export default function api(link) {\r\n  return `${process.env.REACT_APP_BACKEND_HOST}/${link}`;\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n  CButton,\r\n} from \"@coreui/react\";\r\nimport api from \"../../../const/api\";\r\n\r\nexport default class DebtDetail extends React.Component {\r\n  constructor(props) {\r\n    const { match } = props;\r\n    super(props);\r\n    this.state = {\r\n      debt_id: match && match.params && match.params.id,\r\n      loading: true,\r\n      debtDetail: null,\r\n      history: false,\r\n      error: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getDebt();\r\n  }\r\n\r\n  getDebt() {\r\n    this.setLoading(true);\r\n    fetch(api(`debtDetails/${this.state.debt_id}`), { method: \"GET\" }).then(\r\n      (res) => {\r\n        if (res.ok)\r\n          res.json().then((data) => {\r\n            if (data && data.debtDetail)\r\n              this.setState({\r\n                debtDetail: data.debtDetail,\r\n                loading: false,\r\n              });\r\n          });\r\n      }\r\n    );\r\n  }\r\n\r\n  // getDebtPayment() {\r\n  //   this.setLoading(true);\r\n  //   fetch(api(`debtPayment/${this.state.debt_id}`), { method: \"GET\" }).then(\r\n  //     (res) => {\r\n  //       if (res.ok) {\r\n  //         res.json().then((data) => {\r\n  //           if (data && data.total) {\r\n  //             if (data.total.total != null) {\r\n  //               this.setState({\r\n  //                 history: false,\r\n  //                 loading: false,\r\n  //               });\r\n  //             } else {\r\n  //               this.setState({\r\n  //                 history: true,\r\n  //                 loading: false,\r\n  //               });\r\n  //             }\r\n  //           }\r\n  //         });\r\n  //       }\r\n  //     }\r\n  //   );\r\n  // }\r\n\r\n  // DebtPayementDetail(id) {\r\n  //   this.props.history.push(\"/debt/payment/\" + id);\r\n  // }\r\n  returnToList() {\r\n    this.props.history.push(\"/debt/list\");\r\n  }\r\n\r\n  render() {\r\n    const { debtDetail, loading } = this.state;\r\n    return (\r\n      <>\r\n        {loading ? (\r\n          <></>\r\n        ) : (\r\n          <CRow>\r\n            <CCol xs={12}>\r\n              <CCard className=\"mb-4\">\r\n                <CCardHeader\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <strong>\r\n                    Details : Montant total {`=>`}{\" \"}\r\n                    {debtDetail[0].totalAmountDebt > 1000 ? (\r\n                      <>{debtDetail[0].totalAmountDebt.toLocaleString()} Ar</>\r\n                    ) : (\r\n                      <>{debtDetail[0].totalAmountDebt} Ar</>\r\n                    )}\r\n                  </strong>\r\n\r\n                  {/* <CButton\r\n                    color={\"light\"}\r\n                    disabled={history}\r\n                    onClick={() => this.DebtPayementDetail(debt_id)}\r\n                  >\r\n                    Historique Paiement\r\n                  </CButton> */}\r\n\r\n                  <CButton color={\"light\"} onClick={() => this.returnToList()}>\r\n                    Retour\r\n                  </CButton>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                  <CTable>\r\n                    <CTableHead>\r\n                      <CTableRow>\r\n                        <CTableHeaderCell scope=\"col\">Service</CTableHeaderCell>\r\n                        <CTableHeaderCell scope=\"col\">\r\n                          Quantit√©\r\n                        </CTableHeaderCell>\r\n                        <CTableHeaderCell scope=\"col\">\r\n                          Prix unitaire\r\n                        </CTableHeaderCell>\r\n                        <CTableHeaderCell scope=\"col\">\r\n                          Prix total\r\n                        </CTableHeaderCell>\r\n                      </CTableRow>\r\n                    </CTableHead>\r\n                    <CTableBody>\r\n                      {debtDetail &&\r\n                        debtDetail.map((detail, index) => (\r\n                          <CTableRow key={index}>\r\n                            <CTableDataCell>{detail.entitled}</CTableDataCell>\r\n\r\n                            <CTableDataCell>{detail.quantity}</CTableDataCell>\r\n\r\n                            <CTableDataCell>\r\n                              {detail.unitPrice > 1000 ? (\r\n                                <>{detail.unitPrice.toLocaleString()} Ar</>\r\n                              ) : (\r\n                                <>{detail.unitPrice} Ar</>\r\n                              )}\r\n                            </CTableDataCell>\r\n                            <CTableDataCell>\r\n                              {detail.totalAmount > 1000 ? (\r\n                                <>{detail.totalAmount.toLocaleString()} Ar</>\r\n                              ) : (\r\n                                <>{detail.totalAmount} Ar</>\r\n                              )}\r\n                            </CTableDataCell>\r\n                          </CTableRow>\r\n                        ))}\r\n                    </CTableBody>\r\n                  </CTable>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  setLoading(state) {\r\n    this.setState({\r\n      loading: state,\r\n    });\r\n  }\r\n  setId(id) {\r\n    this.setState({\r\n      id: id,\r\n    });\r\n  }\r\n}\r\n"],"names":["api","link","process","DebtDetail","props","match","state","debt_id","params","id","loading","debtDetail","history","error","this","getDebt","setLoading","fetch","method","then","res","ok","json","data","setState","push","xs","className","style","display","justifyContent","totalAmountDebt","toLocaleString","color","onClick","returnToList","scope","map","detail","index","entitled","quantity","unitPrice","totalAmount","React"],"sourceRoot":""}